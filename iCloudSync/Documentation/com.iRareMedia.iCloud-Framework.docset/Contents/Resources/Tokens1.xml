<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/iCloud.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/iCloud</TokenIdentifier>
			<Abstract type="html">iCloud Document Sync makes it easy for developers to integrate the iCloud document storage APIs into iOS applications. This is how iCloud document-storage and management should&apos;ve been out of the box from Apple. Integrate iCloud into iOS (OS X coming soon) Objective-C document projects with one-line code methods. Sync, upload, manage, and remove documents to and from iCloud with only a few lines of code (compared to the hundreds of lines and hours that it usually takes). Get iCloud up and running in your iOS app in only a few minutes. Updates and more details on this project can be found on GitHub. If you like the project, please star it on GitHub!</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/sharedCloud</TokenIdentifier>
			<Abstract type="html">iCloud shared instance object</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (instancetype)sharedCloud</Declaration>
			
			<ReturnValue><Abstract type="html">The shared instance of iCloud</Abstract></ReturnValue>
			<Anchor>//api/name/sharedCloud</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/setDelegate:</TokenIdentifier>
			<Abstract type="html">iCloud Delegate helps call methods when document processes begin or end</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (weak, nonatomic) id&lt;iCloudDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/delegate</TokenIdentifier>
			<Abstract type="html">iCloud Delegate helps call methods when document processes begin or end</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (weak, nonatomic) id&lt;iCloudDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/iCloud/delegate</TokenIdentifier>
			<Abstract type="html">iCloud Delegate helps call methods when document processes begin or end</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (weak, nonatomic) id&lt;iCloudDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/setQuery:</TokenIdentifier>
			<Abstract type="html">The current NSMetadataQuery object</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (strong) NSMetadataQuery *query</Declaration>
			
			
			<Anchor>//api/name/query</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/query</TokenIdentifier>
			<Abstract type="html">The current NSMetadataQuery object</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (strong) NSMetadataQuery *query</Declaration>
			
			
			<Anchor>//api/name/query</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/iCloud/query</TokenIdentifier>
			<Abstract type="html">The current NSMetadataQuery object</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (strong) NSMetadataQuery *query</Declaration>
			
			
			<Anchor>//api/name/query</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/setFileList:</TokenIdentifier>
			<Abstract type="html">A list of iCloud files from the current query</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (strong) NSMutableArray *fileList</Declaration>
			
			
			<Anchor>//api/name/fileList</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/fileList</TokenIdentifier>
			<Abstract type="html">A list of iCloud files from the current query</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (strong) NSMutableArray *fileList</Declaration>
			
			
			<Anchor>//api/name/fileList</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/iCloud/fileList</TokenIdentifier>
			<Abstract type="html">A list of iCloud files from the current query</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (strong) NSMutableArray *fileList</Declaration>
			
			
			<Anchor>//api/name/fileList</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/setPreviousQueryResults:</TokenIdentifier>
			<Abstract type="html">A list of iCloud files from the previous query</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (strong) NSMutableArray *previousQueryResults</Declaration>
			
			
			<Anchor>//api/name/previousQueryResults</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/previousQueryResults</TokenIdentifier>
			<Abstract type="html">A list of iCloud files from the previous query</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (strong) NSMutableArray *previousQueryResults</Declaration>
			
			
			<Anchor>//api/name/previousQueryResults</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/iCloud/previousQueryResults</TokenIdentifier>
			<Abstract type="html">A list of iCloud files from the previous query</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property (strong) NSMutableArray *previousQueryResults</Declaration>
			
			
			<Anchor>//api/name/previousQueryResults</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/setVerboseLogging:</TokenIdentifier>
			<Abstract type="html">Enable verbose logging for detailed feedback in the log. Turning this off only prints crucial log notes such as errors.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property BOOL verboseLogging</Declaration>
			
			
			<Anchor>//api/name/verboseLogging</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/verboseLogging</TokenIdentifier>
			<Abstract type="html">Enable verbose logging for detailed feedback in the log. Turning this off only prints crucial log notes such as errors.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property BOOL verboseLogging</Declaration>
			
			
			<Anchor>//api/name/verboseLogging</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/iCloud/verboseLogging</TokenIdentifier>
			<Abstract type="html">Enable verbose logging for detailed feedback in the log. Turning this off only prints crucial log notes such as errors.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property BOOL verboseLogging</Declaration>
			
			
			<Anchor>//api/name/verboseLogging</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/setVerboseAvailabilityLogging:</TokenIdentifier>
			<Abstract type="html">Enable verbose availability logging for repeated feedback about iCloud availability in the log. Turning this off will prevent availability-related messages from being printed in the log. This property does not relate to the verboseLogging property.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property BOOL verboseAvailabilityLogging</Declaration>
			
			
			<Anchor>//api/name/verboseAvailabilityLogging</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/verboseAvailabilityLogging</TokenIdentifier>
			<Abstract type="html">Enable verbose availability logging for repeated feedback about iCloud availability in the log. Turning this off will prevent availability-related messages from being printed in the log. This property does not relate to the verboseLogging property.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property BOOL verboseAvailabilityLogging</Declaration>
			
			
			<Anchor>//api/name/verboseAvailabilityLogging</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/iCloud/verboseAvailabilityLogging</TokenIdentifier>
			<Abstract type="html">Enable verbose availability logging for repeated feedback about iCloud availability in the log. Turning this off will prevent availability-related messages from being printed in the log. This property does not relate to the verboseLogging property.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>@property BOOL verboseAvailabilityLogging</Declaration>
			
			
			<Anchor>//api/name/verboseAvailabilityLogging</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/checkCloudAvailability</TokenIdentifier>
			<Abstract type="html">Check whether or not iCloud is available and that it can be accessed. Returns a boolean value.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (BOOL)checkCloudAvailability</Declaration>
			
			<ReturnValue><Abstract type="html">YES if iCloud is available. NO if iCloud is not available.</Abstract></ReturnValue>
			<Anchor>//api/name/checkCloudAvailability</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/checkCloudUbiquityContainer</TokenIdentifier>
			<Abstract type="html">Check that the current application&apos;s iCloud Ubiquity Container is available. Returns a boolean value.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (BOOL)checkCloudUbiquityContainer</Declaration>
			
			<ReturnValue><Abstract type="html">YES if the iCloud ubiquity container is available. NO if the ubiquity container is not available.</Abstract></ReturnValue>
			<Anchor>//api/name/checkCloudUbiquityContainer</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/ubiquitousContainerURL</TokenIdentifier>
			<Abstract type="html">Retrieve the current application&apos;s ubiquitous root URL</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (NSURL *)ubiquitousContainerURL</Declaration>
			
			<ReturnValue><Abstract type="html">An NSURL with the root iCloud Ubiquitous URL for the current app. May return nil if iCloud is not properly setup or available.</Abstract></ReturnValue>
			<Anchor>//api/name/ubiquitousContainerURL</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/ubiquitousDocumentsDirectoryURL</TokenIdentifier>
			<Abstract type="html">Retrieve the current application&apos;s ubiquitous documents directory URL</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (NSURL *)ubiquitousDocumentsDirectoryURL</Declaration>
			
			<ReturnValue><Abstract type="html">An NSURL with the iCloud ubiquitous documents directory URL for the current app. May return nil if iCloud is not properly setup or available.</Abstract></ReturnValue>
			<Anchor>//api/name/ubiquitousDocumentsDirectoryURL</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/updateFiles</TokenIdentifier>
			<Abstract type="html">Check for and update the list of files stored in your app&apos;s iCloud Documents Folder. This method is automatically called by iOS when there are changes to files in the iCloud Directory. The iCloudFilesDidChange:withNewFileNames: delegate method is triggered by this method.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)updateFiles</Declaration>
			
			
			<Anchor>//api/name/updateFiles</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/saveAndCloseDocumentWithName:withContent:completion:</TokenIdentifier>
			<Abstract type="html">Create, save, and close a document in iCloud.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)saveAndCloseDocumentWithName:(NSString *)documentName withContent:(NSData *)content completion:(void ( ^ ) ( UIDocument *cloudDocument , NSData *documentData , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the document being written to iCloud. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>content</Name>
					<Abstract type="html">The data to write to the document</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when the document is successfully saved. The completion block passes UIDocument and NSData objects containing the saved document and it&apos;s contents in the form of NSData. The NSError object contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveAndCloseDocumentWithName:withContent:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/uploadLocalOfflineDocumentsWithRepeatingHandler:completion:</TokenIdentifier>
			<Abstract type="html">Upload any local files that weren&apos;t created with iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)uploadLocalOfflineDocumentsWithRepeatingHandler:(void ( ^ ) ( NSString *documentName , NSError *error ))repeatingHandler completion:(void ( ^ ) ( void ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>repeatingHandler</Name>
					<Abstract type="html">Code block called after each file is uploaded to iCloud. This block is called every-time a local file is uploaded, therefore it may be called multiple times. The NSError object contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">Code block called after all files have been uploaded to iCloud. This block is only called once at the end of the method, regardless of any successes or failures that may have occurred during the upload(s).</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/uploadLocalOfflineDocumentsWithRepeatingHandler:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/uploadLocalDocumentToCloudWithName:completion:</TokenIdentifier>
			<Abstract type="html">Upload a local file to iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)uploadLocalDocumentToCloudWithName:(NSString *)documentName completion:(void ( ^ ) ( NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the local file stored in the application&apos;s documents directory. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called after the file has been uploaded to iCloud</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/uploadLocalDocumentToCloudWithName:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/shareDocumentWithName:completion:</TokenIdentifier>
			<Abstract type="html">Share an iCloud document by uploading it to a public URL.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (NSURL *)shareDocumentWithName:(NSString *)documentName completion:(void ( ^ ) ( NSURL *sharedURL , NSDate *expirationDate , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the iCloud file being uploaded to a public URL. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when the document is successfully uploaded. The completion block passes NSURL, NSDate, and NSError objects. The NSURL object is the public URL where the file is available at, could be nil. The NSDate object is the date that the URL expires on, could be nil. The NSError object contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The public URL where the file is available</Abstract></ReturnValue>
			<Anchor>//api/name/shareDocumentWithName:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/deleteDocumentWithName:completion:</TokenIdentifier>
			<Abstract type="html">Delete a document from iCloud.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)deleteDocumentWithName:(NSString *)documentName completion:(void ( ^ ) ( NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the document to delete from iCloud. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when a file is successfully deleted from iCloud. The NSError object contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/deleteDocumentWithName:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/evictCloudDocumentWithName:completion:</TokenIdentifier>
			<Abstract type="html">Evict a document from iCloud, move it from iCloud to the current application&apos;s local documents directory.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)evictCloudDocumentWithName:(NSString *)documentName completion:(void ( ^ ) ( NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the iCloud document being downloaded from iCloud to the local documents directory. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called after the file has been uploaded to iCloud. This value must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/evictCloudDocumentWithName:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/retrieveCloudDocumentWithName:completion:</TokenIdentifier>
			<Abstract type="html">Open a UIDocument stored in iCloud. If the document does not exist, a new blank document will be created using the documentName provided. You can use the doesFileExistInCloud: method to check if a file exists before calling this method.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)retrieveCloudDocumentWithName:(NSString *)documentName completion:(void ( ^ ) ( UIDocument *cloudDocument , NSData *documentData , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the document in iCloud. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when the document is successfully retrieved (opened or downloaded). The completion block passes UIDocument and NSData objects containing the opened document and it&apos;s contents in the form of NSData. If there is an error, the NSError object will have an error message (may be nil if there is no error). This value must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/retrieveCloudDocumentWithName:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/retrieveCloudDocumentObjectWithName:</TokenIdentifier>
			<Abstract type="html">Get the relevant iCloudDocument object for the specified file</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (iCloudDocument *)retrieveCloudDocumentObjectWithName:(NSString *)documentName</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the UIDocument stored in iCloud. This value must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An iCloudDocument (UIDocument subclass) object. May return nil if iCloud is unavailable or if an error occurred</Abstract></ReturnValue>
			<Anchor>//api/name/retrieveCloudDocumentObjectWithName:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/doesFileExistInCloud:</TokenIdentifier>
			<Abstract type="html">Check if a file exists in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (BOOL)doesFileExistInCloud:(NSString *)documentName</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the UIDocument in iCloud. This value must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">BOOL value, YES if the file does exist in iCloud, NO if it does not. May return NO if iCloud is unavailable.</Abstract></ReturnValue>
			<Anchor>//api/name/doesFileExistInCloud:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/fileSize:</TokenIdentifier>
			<Abstract type="html">Get the size of a file stored in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (NSNumber *)fileSize:(NSString *)documentName</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the file in iCloud. This value must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The number of bytes in an unsigned long long. Returns nil if the file does not exist. May return a nil value if iCloud is unavailable.</Abstract></ReturnValue>
			<Anchor>//api/name/fileSize:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/fileModifiedDate:</TokenIdentifier>
			<Abstract type="html">Get the last modified date of a file stored in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (NSDate *)fileModifiedDate:(NSString *)documentName</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the file in iCloud. This value must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The date that the file was last modified. Returns nil if the file does not exist. May return a nil value if iCloud is unavailable.</Abstract></ReturnValue>
			<Anchor>//api/name/fileModifiedDate:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/fileCreatedDate:</TokenIdentifier>
			<Abstract type="html">Get the creation date of a file stored in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (NSDate *)fileCreatedDate:(NSString *)documentName</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the file in iCloud. This value must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The date that the file was created. Returns nil if the file does not exist. May return a nil value if iCloud is unavailable.</Abstract></ReturnValue>
			<Anchor>//api/name/fileCreatedDate:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/listCloudFiles</TokenIdentifier>
			<Abstract type="html">Get a list of files stored in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)listCloudFiles</Declaration>
			
			<ReturnValue><Abstract type="html">NSArray with a list of all the files currently stored in your app&apos;s iCloud Documents directory. May return a nil value if iCloud is unavailable.</Abstract></ReturnValue>
			<Anchor>//api/name/listCloudFiles</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/renameOriginalDocument:withNewName:completion:</TokenIdentifier>
			<Abstract type="html">Rename a document in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)renameOriginalDocument:(NSString *)documentName withNewName:(NSString *)newName completion:(void ( ^ ) ( NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the document being renamed in iCloud. The file specified should exist, otherwise an error will occur. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>newName</Name>
					<Abstract type="html">The new name which the document should be renamed with. The file specified should not exist, otherwise an error will occur. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when the document renaming has completed. The completion block passes and NSError object which contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/renameOriginalDocument:withNewName:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/duplicateOriginalDocument:withNewName:completion:</TokenIdentifier>
			<Abstract type="html">Duplicate a document in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)duplicateOriginalDocument:(NSString *)documentName withNewName:(NSString *)newName completion:(void ( ^ ) ( NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the document being duplicated in iCloud. The file specified should exist, otherwise an error will occur. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>newName</Name>
					<Abstract type="html">The new name which the document should be duplicated to (usually the same name with the word &quot;copy&quot; appended to the end). The file specified should not exist, otherwise an error will occur. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when the document duplication has completed. The completion block passes and NSError object which contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/duplicateOriginalDocument:withNewName:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/documentStateForFile:completion:</TokenIdentifier>
			<Abstract type="html">Get the current document state of a file stored in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)documentStateForFile:(NSString *)documentName completion:(void ( ^ ) ( UIDocumentState *documentState , NSString *userReadableDocumentState , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the file in iCloud. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Completion handler that passes three parameters, an NSError, NSString and a UIDocumentState. The documentState parameter represents the document state that the specified file is currently in (may be nil if the file does not exist). The userReadableDocumentState parameter is an NSString which succinctly describes the current document state; if the file does not exist, a non-scary error will be displayed. The NSError parameter will contain a 404 error if the file does not exist.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/documentStateForFile:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/monitorDocumentStateForFile:onTarget:withSelector:</TokenIdentifier>
			<Abstract type="html">Monitor changes in the state of a document stored in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (BOOL)monitorDocumentStateForFile:(NSString *)documentName onTarget:(id)sender withSelector:(SEL)selector</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the file in iCloud. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>sender</Name>
					<Abstract type="html">Object registering as an observer. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>selector</Name>
					<Abstract type="html">Selector to be called when the document state changes. Must only have one argument, an instance of NSNotifcation whose object is an iCloudDocument (UIDocument subclass). This value must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the monitoring was successfully setup, NO if there was an issue setting up the monitoring.</Abstract></ReturnValue>
			<Anchor>//api/name/monitorDocumentStateForFile:onTarget:withSelector:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/stopMonitoringDocumentStateChangesForFile:onTarget:</TokenIdentifier>
			<Abstract type="html">Stop monitoring changes to the state of a document stored in iCloud</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (BOOL)stopMonitoringDocumentStateChangesForFile:(NSString *)documentName onTarget:(id)sender</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the file in iCloud. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>sender</Name>
					<Abstract type="html">Object registered as an observer that will no longer receive document state updates. This value must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if the monitoring was successfully setup, NO if there was an issue setting up the monitoring.</Abstract></ReturnValue>
			<Anchor>//api/name/stopMonitoringDocumentStateChangesForFile:onTarget:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/findUnresolvedConflictingVersionsOfFile:</TokenIdentifier>
			<Abstract type="html">Find all the conflicting versions of a specified document</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)findUnresolvedConflictingVersionsOfFile:(NSString *)documentName</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the file in iCloud. This value must not be nil.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An array of NSFileVersion objects, or nil if no such version object exists.</Abstract></ReturnValue>
			<Anchor>//api/name/findUnresolvedConflictingVersionsOfFile:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/resolveConflictForFile:withSelectedFileVersion:</TokenIdentifier>
			<Abstract type="html">Your application can follow one of three strategies for resolving document-version conflicts:

* Merge the changes from the conflicting versions.
* Choose one of the document versions based on some pertinent factor, such as the version with the latest modification date.
* Enable the user to view conflicting versions of a document and select the one to use.</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)resolveConflictForFile:(NSString *)documentName withSelectedFileVersion:(NSFileVersion *)documentVersion</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the file in iCloud. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>documentVersion</Name>
					<Abstract type="html">The version of the document which should be kept and saved. All other conflicting versions will be removed.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/resolveConflictForFile:withSelectedFileVersion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/getListOfCloudFiles</TokenIdentifier>
			<Abstract type="html">DEPRECATED. Use listCloudFiles instead. Get a list of files stored in iCloud (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; Deprecated in version 7.3. Use listCloudFiles instead.&lt;/span&gt;)</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (NSArray *)getListOfCloudFiles</Declaration>
			
			<ReturnValue><Abstract type="html">NSArray with a list of all the files currently stored in your app&apos;s iCloud Documents directory. May return a nil value if iCloud is unavailable.</Abstract></ReturnValue>
			<Anchor>//api/name/getListOfCloudFiles</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/iCloud/saveChangesToDocumentWithName:withContent:completion:</TokenIdentifier>
			<Abstract type="html">DEPRECATED. Use saveAndCloseDocumentWithName:withContent:completion: instead. Record changes made to a document in iCloud. Changes are saved when the document is closed. (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; Deprecated beginning in version 7.1. Use saveAndCloseDocumentWithName:withContent:completion: instead. This method may become unavailable in a future version.&lt;/span&gt;)</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>- (void)saveChangesToDocumentWithName:(NSString *)documentName withContent:(NSData *)content completion:(void ( ^ ) ( UIDocument *cloudDocument , NSData *documentData , NSError *error ))handler</Declaration>
			<Parameters>
				<Parameter>
					<Name>documentName</Name>
					<Abstract type="html">The name of the document being written to iCloud. This value must not be nil.</Abstract>
				</Parameter><Parameter>
					<Name>content</Name>
					<Abstract type="html">The data to write to the document</Abstract>
				</Parameter><Parameter>
					<Name>handler</Name>
					<Abstract type="html">Code block called when the document changes are recorded. The completion block passes UIDocument and NSData objects containing the saved document and it&apos;s contents in the form of NSData. The NSError object contains any error information if an error occurred, otherwise it will be nil.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/saveChangesToDocumentWithName:withContent:completion:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/uploadLocalOfflineDocumentsWithDelegate:</TokenIdentifier>
			<Abstract type="html">DEPRECATED. Use uploadLocalOfflineDocuments instead, like so: [[iCloud sharedCloud] uploadLocalOfflineDocuments]; (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; Deprecated in version 7.0. Use uploadLocalOfflineDocuments instead.&lt;/span&gt;)</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (void)uploadLocalOfflineDocumentsWithDelegate:(id&lt;iCloudDelegate&gt;)delegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The iCloudDelegate object to be used for delegate notifications</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/uploadLocalOfflineDocumentsWithDelegate:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/iCloud/updateFilesWithDelegate:</TokenIdentifier>
			<Abstract type="html">DEPRECATED. Use updateFiles instead, like so: [[iCloud sharedCloud] updateFiles]; (&lt;b class=&quot;deprecated&quot;&gt;Deprecated:&lt;/b&gt;&lt;span class=&quot;deprecated&quot;&gt; Deprecated in version 7.0. Use updateFiles instead.&lt;/span&gt;)</Abstract>
			<DeclaredIn>iCloud.h</DeclaredIn>			
			
			<Declaration>+ (void)updateFilesWithDelegate:(id&lt;iCloudDelegate&gt;)delegate</Declaration>
			<Parameters>
				<Parameter>
					<Name>delegate</Name>
					<Abstract type="html">The iCloudDelegate object to be used for delegate notifications</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/updateFilesWithDelegate:</Anchor>
            <NodeRef refid="1"/>
		</Token>
		
	</File>
</Tokens>